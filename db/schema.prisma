datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model User {
  id Int @id @default(autoincrement())

  intra IntraUser?

  intra_id  Int  @unique
  github_id Int? @unique

  is_public Boolean @default(false)

  created_at DateTime @default(now())
  update_at  DateTime
}

model IntraUser {
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id Int  @unique

  id        Int      @unique
  synced_at DateTime @updatedAt

  created_at DateTime
  update_at  DateTime

  login          String
  email          String
  displayname    String
  isStaff        Boolean
  pool_year      String
  pool_month     String
  anonymize_date DateTime
  alumni         Boolean
  cursus_users   CursusUser[]
  project_users  ProjectUser[]
  title_users    TitleUser[]
  campus_users   CampusUser[]
  achievements   AchievementesOnUsers[]
  coalitions     CoalitionsOnUsers[]
}

model CursusUser {
  id Int @id

  user    IntraUser @relation(fields: [user_id], references: [id])
  user_id Int

  cursus    Cursus @relation(fields: [cursus_id], references: [id])
  cursus_id Int

  grade         String?
  level         Float
  skills        SkillUser[]
  begin_at      DateTime
  end_at        DateTime?
  blackholed_at DateTime?

  created_at DateTime
  updated_at DateTime
}

model SkillUser {
  id Int @id @default(autoincrement())

  cursus_user    CursusUser @relation(fields: [cursus_user_id], references: [id])
  cursus_user_id Int

  skill    Skill @relation(fields: [skill_id], references: [id])
  skill_id Int
  level    Float
}

model Skill {
  id   Int    @id @default(autoincrement())
  name String

  skill_users SkillUser[]
}

model Cursus {
  id         Int      @id
  created_at DateTime
  name       String
  slug       String

  cursus_users CursusUser[]
  projects     CursusOnProjects[]
}

model Project {
  id   Int    @id
  name String
  slug String

  parent_id Int?
  parent    Project?  @relation("projects", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Project[] @relation("projects")

  project_users ProjectUser[]
  cursus        CursusOnProjects[]
}

model CursusOnProjects {
  project    Project @relation(fields: [project_id], references: [id])
  project_id Int

  cursus    Cursus @relation(fields: [cursus_id], references: [id])
  cursus_id Int

  @@id([project_id, cursus_id])
}

model ProjectUser {
  id              Int      @id
  occurrence      Int
  final_mark      Int?
  status          String
  is_validated    Boolean?
  current_team_id Int?

  project    Project @relation(fields: [project_id], references: [id])
  project_id Int

  marked_at    String?
  marked       Boolean
  retriable_at String?
  created_at   String
  updated_at   String

  user    IntraUser @relation(fields: [user_id], references: [id])
  user_id Int
}

model Title {
  id   Int    @id
  name String

  title_users TitleUser[]
}

model TitleUser {
  id Int @id

  user    IntraUser @relation(fields: [user_id], references: [id])
  user_id Int

  title    Title @relation(fields: [title_id], references: [id])
  title_id Int
}

model Campus {
  id          Int      @id
  name        String
  time_zone   String
  language    Language @relation(fields: [language_id], references: [id])
  language_id Int

  vogsphere_id    Int?
  country         String
  address         String
  zip             String
  city            String
  website         String
  facebook        String
  twitter         String
  active          Boolean
  email_extension String?

  campus_users CampusUser[]
}

model Language {
  id         Int    @id
  name       String
  identifier String

  campus Campus[]
}

model CampusUser {
  id Int @id

  user    IntraUser @relation(fields: [user_id], references: [id])
  user_id Int

  campus    Campus @relation(fields: [campus_id], references: [id])
  campus_id Int

  is_primary Boolean
  created_at String
  updated_at String
}

model Achievement {
  id             Int     @id
  name           String
  description    String
  tier           String
  kind           String
  visible        Boolean
  image          String?
  nbr_of_success Int?

  parent      Achievement? @relation("achievements", fields: [parent_name], references: [name], onDelete: NoAction, onUpdate: NoAction)
  parent_name String?

  achievements Achievement[] @relation("achievements")

  users AchievementesOnUsers[]
}

model AchievementesOnUsers {
  user    IntraUser @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id Int

  achivement    Achievement @relation(fields: [achivement_id], references: [id], onDelete: Cascade)
  achivement_id Int

  @@id([user_id, achivement_id])
}

model Coalition {
  id        Int     @id
  name      String
  slug      String
  image_url String
  cover_url String?
  color     String

  users CoalitionsOnUsers[]
}

model CoalitionsOnUsers {
  coalition    Coalition @relation(fields: [coalition_id], references: [id], onDelete: Cascade)
  coalition_id Int

  user    IntraUser @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id Int

  @@id([coalition_id, user_id])
}
